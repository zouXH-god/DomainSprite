name: Build

on:
  push:
    branches:
      - master

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        goos: [ linux, windows, darwin ]
        goarch: [ amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.22

      - name: Install dependencies
        run: go mod tidy

      - name: Compile
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          OUTPUT_NAME=DomainSprite
          if [ "${{ matrix.goos }}" == "windows" ]; then OUTPUT_NAME="${OUTPUT_NAME}.exe"; fi
          go build -o build/${GOOS}-${GOARCH}/${OUTPUT_NAME}

      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: DomainSprite-${{ matrix.goos }}-${{ matrix.goarch }}
          path: build/${{ matrix.goos }}-${{ matrix.goarch }}/DomainSprite*
          if-no-files-found: warn

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v1.0.${{ github.run_number }}  # 使用 GitHub 运行号生成版本标签
          release_name: Release v1.0.${{ github.run_number }}
          body: "Release of version v1.0.${{ github.run_number }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload binaries to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/${{ matrix.goos }}-${{ matrix.goarch }}/DomainSprite*
          asset_name: DomainSprite-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz
          asset_content_type: application/gzip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}